<?php

namespace App\Entity;

use ApiPlatform\Metadata\Get;
use ApiPlatform\Metadata\Put;
use ApiPlatform\Metadata\Post;
use ApiPlatform\Metadata\Patch;
use ApiPlatform\Metadata\Delete;
use Doctrine\ORM\Mapping as ORM;
use ApiPlatform\Metadata\ApiResource;
use ApiPlatform\Metadata\GetCollection;
use App\Controller\CustomApprenantController;
use App\Repository\ApprenantRepository;
use Doctrine\Common\Collections\Collection;
use Doctrine\Common\Collections\ArrayCollection;
use Symfony\Bundle\SecurityBundle\Security;
use Symfony\Component\Serializer\Annotation\Groups;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface;

#[ORM\Entity(repositoryClass: ApprenantRepository::class)]
#[ApiResource(
    shortName: 'shortName',
    description: 'description que je cherche',


    // routePrefix: 'v1',
)]

// Basic operations generated by api platform i have just litle custom it
#[GetCollection(
    description: 'Modifie toi',
    name: 'nom temporaire',
  
    normalizationContext: ['groups' => ['apprenant:index']]
)]

#[Get(
    forceEager: true,
    normalizationContext: ['groups' => ['apprenant:show']]
)]

#[Post(
    shortName: 'Inscription',
    uriTemplate: 'apprenant/inscription',
    denormalizationContext: ['groups' => ['apprenant:create']],
)]

#[Put(
    denormalizationContext: ['groups' => ['apprenant:update']]
)]

#[Patch(
    uriTemplate: 'apprenant/change_password/{id}',
    normalizationContext: ['groups' => ['apprenant:updateOne']],
    denormalizationContext: ['groups' => ['apprenant:updateOne']]
)]

#[Delete()]

class Apprenant implements UserInterface, PasswordAuthenticatedUserInterface
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\Column(length: 255)]
    #[Groups(['apprenant:show', 'apprenant:index', 'apprenant:create', 'apprenant:update'])]
    private ?string $nom_complet = null;

    #[ORM\Column(length: 255)]
    #[Groups(['apprenant:show', 'apprenant:index', 'apprenant:create', 'apprenant:update'])]
    private ?string $email = null;

    #[ORM\Column(length: 255)]
    #[Groups(['apprenant:create', 'apprenant:update', 'apprenant:updateOne'])]
    private ?string $mot_de_passe = null;

    #[ORM\Column]
    private array $roles = [];

    #[ORM\ManyToOne(inversedBy: 'apprenants')]
    #[Groups(['apprenant:show'])]
    private ?Immersion $immersion = null;

    #[ORM\ManyToMany(targetEntity: Brief::class, mappedBy: 'apprenant')]
    #[Groups(['apprenant:show'])]
    private Collection $briefs;

    #[ORM\ManyToMany(targetEntity: Projet::class, inversedBy: 'apprenants')]
    #[Groups(['apprenant:show'])]
    private Collection $projet;

    public function __construct()
    {
        $this->briefs = new ArrayCollection();
        $this->projet = new ArrayCollection();
    }


    /**
     * @return
     *     
     */
    public function getPassword(): ?string
    {
        return $this->mot_de_passe;
    }

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getNomComplet(): ?string
    {
        return $this->nom_complet;
    }

    public function setNomComplet(string $nom_complet): static
    {
        $this->nom_complet = $nom_complet;

        return $this;
    }

    public function getEmail(): ?string
    {
        return $this->email;
    }

    public function setEmail(string $email): static
    {
        $this->email = $email;

        return $this;
    }

    public function getMotDePasse(): ?string
    {
        return $this->mot_de_passe;
    }


    public function setMotDePasse(string $mot_de_passe): static
    {
        $this->mot_de_passe = $mot_de_passe;

        return $this;
    }

    public function getImmersion(): ?Immersion
    {
        return $this->immersion;
    }

    public function setImmersion(?Immersion $immersion): static
    {
        $this->immersion = $immersion;

        return $this;
    }

    /**
     * @return Collection<int, Brief>
     */
    public function getBriefs(): Collection
    {
        return $this->briefs;
    }

    public function addBrief(Brief $brief): static
    {
        if (!$this->briefs->contains($brief)) {
            $this->briefs->add($brief);
            $brief->addApprenant($this);
        }

        return $this;
    }

    public function removeBrief(Brief $brief): static
    {
        if ($this->briefs->removeElement($brief)) {
            $brief->removeApprenant($this);
        }

        return $this;
    }


    /**
     * A visual identifier that represents this user.
     *
     * @see UserInterface
     */
    public function getUserIdentifier(): string
    {
        return (string) $this->email;
    }

    /**
     * @see UserInterface
     */
    public function getRoles(): array
    {
        $roles = $this->roles;
        // guarantee every user at least has ROLE_USER
        $roles[] = 'ROLE_APPRENANT';

        return array_unique($roles);
    }

    public function setRoles(array $roles): static
    {
        $this->roles = $roles;

        return $this;
    }

    /**
     * @see UserInterface
     */
    public function eraseCredentials(): void
    {
        // If you store any temporary, sensitive data on the user, clear it here
        // $this->plainPassword = null;
    }

    /**
     * @return Collection<int, Projet>
     */
    public function getProjet(): Collection
    {
        return $this->projet;
    }

    public function addProjet(Projet $projet): static
    {
        if (!$this->projet->contains($projet)) {
            $this->projet->add($projet);
        }

        return $this;
    }

    public function removeProjet(Projet $projet): static
    {
        $this->projet->removeElement($projet);

        return $this;
    }
}
